# Proyecto: Nico Lang

# Descripci√≥n: Un lenguaje de programaci√≥n personalizado

## Contexto del Proyecto

üìå Resumen del Proyecto
El proyecto consiste en el dise√±o e implementaci√≥n de un lenguaje de programaci√≥n propio, de tipo interpretado, orientado espec√≠ficamente al control de hardware gr√°fico (GPU) desde sistemas Linux. El lenguaje se denomina GLX (gpu linux extencion), y su enfoque principal es brindar a usuarios avanzados una herramienta simple, directa y personalizable para modificar par√°metros de rendimiento de la GPU en tiempo real o mediante scripts.

üí° Objetivo General
Desarrollar un lenguaje de alto nivel minimalista que permita controlar, ajustar y automatizar configuraciones de GPU (como frecuencia de reloj, l√≠mites de energ√≠a, velocidad de ventiladores, modos de rendimiento y resoluci√≥n de pantalla), de manera accesible y eficiente desde la l√≠nea de comandos o mediante archivos .glx.

üîß Herramientas y Tecnolog√≠as
üß† Lenguaje de implementaci√≥n
C (lenguaje principal):

Utilizado para construir el int√©rprete del lenguaje.

Permite control directo de bajo nivel y eficiencia en la manipulaci√≥n del sistema.

Se prioriza c√≥digo limpio, modular y portable.

üñ•Ô∏è Sistema operativo de desarrollo
Arch Linux con entorno Budgie (XFCE4 personalizado)

Terminal principal: Alacritty

Arquitectura objetivo: x86_64 (Intel Core i5 12¬™ Gen + NVIDIA RTX 3050)

üéÆ Control de GPU
Herramientas utilizadas por el lenguaje para ejecutar comandos:

nvidia-smi ‚Üí para gestionar clocks, modos de rendimiento, l√≠mites de energ√≠a.

nvidia-settings ‚Üí para ajustar fan speed, overclock, etc.

xrandr ‚Üí para manejar resoluciones, tasas de refresco, salidas HDMI/DisplayPort.

üìÅ Estructura del lenguaje
Sintaxis inspirada en Bash y JSON simplificado, para permitir f√°cil adopci√≥n.

Soporte inicial para 4 modos preestablecidos:

quiet: silencioso, m√≠nima energ√≠a y ruido.

balanced: mezcla entre rendimiento y consumo.

performance: m√°ximo rendimiento.

custom: valores definidos por el usuario.

Ejemplo de script .glx:

# Ejemplo de sintaxis

modo: quiet
- power_limit: 80
- fan_speed: 30
- clocks: 300,800
- persist_mode: on

modo: balanced
- power_limit: 100
- fan_speed: 50
- clocks: 500,1200
- persist_mode: on

modo: performance
- power_limit: 130
- fan_speed: 80
- clocks: 800,1800
- persist_mode: on

üî® Toolchain
Sistema de build propio con Makefile para compilar fuentes .glx a ejecutables.

Opcional: integraci√≥n futura con LLVM o generaci√≥n intermedia en C para facilitar portabilidad.

üì¶ Resultado esperado
Binario nativo por cada archivo .glx compilado.

Al ejecutarse, el binario configura la GPU seg√∫n lo indicado.

Permite integraci√≥n en scripts de sistema, CRON jobs o herramientas gr√°ficas.

## IMPORTANTE
- ES MI PRIMERA VEZ INTENTANDO HACER UN LENGUAJE. EXPLICA EN TODO MOMENTO LOS ERRORES, CORRECCIONES O SINTAXIS QUE VAS A HACER O QUE FALTA.
- HACER CAMBIOS PEQUE√ëOS Y GRADUALES EN EL C√ìDIGO, EXPLICANDO CADA PARTE PARA FACILITAR EL APRENDIZAJE.
- TENES QUE SIEMPRE TODO A DETALLE. IMPULSAME A IMPLEMENTAR CODIGO A MANO CON TU GUIA, SIN QUE VOS IMPLEMENTES TODO



